[project]
name = "finance-bot"
version = "0.0.1a"
description = "Telegram Finance bot based with aiogram 3.20"
readme = "README.md"
requires-python = ">=3.12"
authors = [{ name = "Artem Bocker" }]
dependencies = [
  "aiofiles>=24.1.0",
  "aiogram>=3.22.0",
  "colorama>=0.4.6",
  "nest-asyncio>=1.6.0",
  "python-dotenv>=1.1.1",
  "pyyaml>=6.0.2",
  "tortoise-orm>=0.25.1",
]

[project.optional-dependencies]
dev = [
  "ruff>=0.3.0",
  "mypy>=1.8.0",
  "pytest>=8.0.0",
  "pytest-asyncio>=0.24.0",
  "pytest-cov>=4.1.0",
  "black>=24.0.0",
  "isort>=5.13.0",
]

[tool.uv]
index-url = "https://pypi.org/simple"

[tool.uv.sources]

[tool.uv.pip]

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "--strict-markers",
  "--strict-config",
  "--cov=bot",
  "--cov-report=term-missing",
  "--cov-report=html",
  "--cov-report=xml",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["bot"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
